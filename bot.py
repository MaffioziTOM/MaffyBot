import os
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackContext, filters
from telegram import constants

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
TOKEN = "7965432987:AAFQqeT79_vO6YFh3s2hXTZxbJStLJ9HHe0"  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç BotFather
CHANNEL_ID = "-1002468008518"  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "-1002468008518")
ADMIN_ID = "752269181"  # –í–∞—à –ª–∏—á–Ω—ã–π Telegram ID (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    start_message = (
        r"**‚ú® –ü—Ä–∏–≤–µ—Ç, –∏—Å–∫–∞—Ç–µ–ª—å —Ç–∞–π–Ω! ‚ú®**\n\n"
        r"_üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ —É—à—ë–ª –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å!_\n\n"
        r"(–®–∞–Ω—Å –Ω–∞ –æ—Ç–≤–µ—Ç +100%, –µ—Å–ª–∏ –ø–æ–¥–æ–π–¥—ë—à—å —Å –¥—É—à–æ–π, –∞ –Ω–µ —Å ¬´–∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞?¬ª üòè)\n\n"
        r"**üî• –î–µ—Ä–∑–∞–π! –ö—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ‚Äî —Ç–æ—Ç –ø–æ–∑–Ω–∞—ë—Ç!**"
    )
    await update.message.reply_text(start_message, parse_mode=constants.ParseMode.MARKDOWN)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_message(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(update.message.from_user.id) == ADMIN_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    question = update.message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(chat_id=ADMIN_ID, text=f"üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{question}\n\n–û—Ç–≤–µ—Ç—å –º–Ω–µ –≤ –õ–°, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª!")

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("**üíå –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! –ú–∞—Ñ—Ñ–∏ —É–∂–µ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å –∑–∞–¥—É–º—á–∏–≤—ã–º ¬´—Ö–º–º–º¬ª‚Ä¶**", parse_mode=constants.ParseMode.MARKDOWN)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['last_question'] = question

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_admin_reply(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(update.message.from_user.id) != ADMIN_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    answer = update.message.text
    question = context.user_data.get('last_question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = (
        f"**üë§ –ê–Ω–æ–Ω–∏–º:**\n"
        f"‚Äî *{question}*\n\n"
        f"**üé§ –ú–∞—Ñ—Ñ–∏:**\n"
        f"‚Äî *{answer}*\n\n"
        f"**üíå –¢–æ–∂–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å? –ë–æ—Ç –≤—Å–µ–≥–¥–∞ –∂–¥—ë—Ç! üëâ @ask_maffi_bot**"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(chat_id=CHANNEL_ID, text=formatted_message, parse_mode=constants.ParseMode.MARKDOWN)

    await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# üîπ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_admin_reply))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.process_update(update)
    return "ok"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def set_webhook():
    await bot.set_webhook("https://your-render-url.onrender.com/webhook")

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    import asyncio
    asyncio.run(set_webhook())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
